function [allData, scenario, sensors] = highway_scenario()
%highway_scenario - Returns sensor detections
%    allData = highway_scenario returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = highway_scenario optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.13 (R2022b) and Automated Driving Toolbox 3.6 (R2022b).
% Generated on: 03-Dec-2022 23:12:29

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running

    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;

    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    insMeas = {};
    isValidTime = false(1, numSensors);
    isValidLaneTime = false(1, numSensors);
    isValidPointCloudTime = false(1, numSensors);
    isValidINSTime = false(1, numSensors);

    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        % Generate the ego vehicle lane boundaries
        if isa(sensor, 'visionDetectionGenerator')
            maxLaneDetectionRange = min(500,sensor.MaxRange);
            lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
        end
        type = getDetectorOutput(sensor);
        if strcmp(type, 'Objects only')
            if isa(sensor,'ultrasonicDetectionGenerator')
                [objectDets, isValidTime(sensorIndex)] = sensor(poses, time);
                numObjects = length(objectDets);
            else
                [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
            end
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes only')
            [laneDets, ~, isValidTime(sensorIndex)] = sensor(lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes and objects')
            [objectDets, numObjects, isValidTime(sensorIndex), laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes with occlusion')
            [laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'PointCloud')
            if sensor.HasRoadsInputPort
                rdmesh = roadMesh(egoVehicle,min(500,sensor.MaxRange));
                [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, rdmesh, time);
            else
                [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, time);
            end
            ptClouds = [ptClouds; ptCloud]; %#ok<AGROW>
        elseif strcmp(type, 'INSMeasurement')
            insMeasCurrent = sensor(actorState, time);
            insMeas = [insMeas; insMeasCurrent]; %#ok<AGROW>
            isValidINSTime(sensorIndex) = true;
        end
    end

    % Aggregate all detections into a structure for later use
    if any(isValidTime) || any(isValidLaneTime) || any(isValidPointCloudTime) || any(isValidINSTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = visionDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [3.7 0], ...
    'Pitch', 0, ...
    'MaxRange', 100, ...
    'DetectorOutput', 'Lanes and objects', ...
    'Intrinsics', cameraIntrinsics([300 500],[500 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{2} = drivingRadarDataGenerator('SensorIndex', 2, ...
    'MountingLocation', [3.7 0 0.2], ...
    'RangeLimits', [0 100], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [90 5], ...
    'Profiles', profiles);
sensors{3} = visionDetectionGenerator('SensorIndex', 3, ...
    'SensorLocation', [3.7 0], ...
    'Yaw', 90, ...
    'Pitch', 0, ...
    'MaxRange', 100, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([300 1814.81],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{4} = visionDetectionGenerator('SensorIndex', 4, ...
    'SensorLocation', [3.7 0], ...
    'Yaw', -90, ...
    'MaxRange', 100, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([300 1814.81],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{5} = drivingRadarDataGenerator('SensorIndex', 5, ...
    'MountingLocation', [-1 0 0.2], ...
    'MountingAngles', [-180 0 0], ...
    'RangeLimits', [0 100], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [100 5], ...
    'Profiles', profiles);
numSensors = 5;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [0.2 0.13 0;
    202.6 0.13 0;
    500 0.13 0];
laneSpecification = lanespec(3);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'highway');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [99.9 0 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Ego_Car');
waypoints = [99.9 0 0;
    121.2 0 0;
    143.7 0 0;
    164.9 0 0;
    176.3 0 0;
    183.7 0 0;
    195.4 0 0;
    204.62 0 0;
    219.6 0 0;
    255 0 0;
    286.4 0 0;
    321.5 0 0;
    361.1 0 0;
    389.2 0 0;
    399.9 0 0;
    469.1 0 0;
    489.9 0 0;
    499.9 0 0];
speed = [30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;0];
waittime = [0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0];
trajectory(egoVehicle, waypoints, speed, waittime);

% Add the non-ego actors
car2 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [7.8 3.5 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Car2');
waypoints = [7.8 3.5 0;
    24.7 3.5 0;
    48.6 3.5 0;
    68.3 3.5 0;
    91.1 3.5 0;
    114.1 3.5 0;
    127.7 3.5 0;
    146.9 3.5 0;
    161.52 3.5 0;
    191.2 3.5 0;
    314.3 3.5 0;
    385.5 3.5 0;
    400 3.5 0;
    500 3.5 0];
speed = [25;25;25;25;25;25;25;25;25;25;25;25;25;25];
waittime = [0;0;0;0;0;0;0;0;0;0;0;0;0;0];
trajectory(car2, waypoints, speed, waittime);

car3 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [51.7 3.5 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.494 0.184 0.556], ...
    'Name', 'Car3');
waypoints = [51.7 3.5 0;
    62.4 3.5 0;
    73.8 3.5 0;
    85.5 3.5 0;
    99.2 3.5 0;
    108.2 3.5 0;
    122.3 3.5 0;
    146.4 3.5 0;
    166.6 3.5 0;
    300 3.5 0;
    400 3.5 0;
    450 3.5 0;
    500 3.5 0];
speed = [30;30;30;30;30;30;30;30;30;30;30;30;30];
waittime = [0;0;0;0;0;0;0;0;0;0;0;0;0];
trajectory(car3, waypoints, speed, waittime);

car4 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [179.5 3.5 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.466 0.674 0.188], ...
    'Name', 'Car4');
waypoints = [179.5 3.5 0;
    300 3.5 0;
    400 3.5 0;
    500 3.5 0];
speed = [30;30;30;30];
waittime = [0;0;0;0];
trajectory(car4, waypoints, speed, waittime);

car5 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [156.490000013138 0 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.301 0.745 0.933], ...
    'Name', 'Car5');
waypoints = [156.490000013138 0 0;
    227.2 0 0;
    387 0 0;
    478.5 0 0];
speed = [10;10;10;10];
waittime = [0;0;0;0];
trajectory(car5, waypoints, speed, waittime);

car = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [120.59999999742 -3.50000003483099 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.635 0.078 0.184], ...
    'Name', 'Car');
waypoints = [120.59999999742 -3.50000003483099 0;
    170.3 -3.5 0;
    200.8 -3.5 0;
    215.8 -3.5 0;
    285.1 -3.5 0;
    306.4 -3.5 0;
    355.2 -3.5 0;
    483.8 -3.5 0;
    499.6 -3.5 0];
speed = [15;15;15;15;15;15;15;15;15];
waittime = [0;0;0;0;0;0;0;0;0];
trajectory(car, waypoints, speed, waittime);

function output = getDetectorOutput(sensor)

if isa(sensor, 'visionDetectionGenerator')
    output = sensor.DetectorOutput;
elseif isa(sensor, 'lidarPointCloudGenerator')
    output = 'PointCloud';
elseif isa(sensor, 'insSensor')
    output = 'INSMeasurement';
else
    output = 'Objects only';
end

