function [allData, scenario, sensor] = Roundabout()
%Roundabout - Returns sensor detections
%    allData = Roundabout returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = Roundabout optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.13 (R2022b) and Automated Driving Toolbox 3.6 (R2022b).
% Generated on: 21-Nov-2022 18:48:59

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
sensor = createSensor(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running

    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;

    % Generate the ego vehicle lane boundaries
    if isa(sensor, 'visionDetectionGenerator')
        maxLaneDetectionRange = min(500,sensor.MaxRange);
        lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
    end
    % Generate detections for the sensor
    ptClouds = [];
    insMeas = [];
    [objectDetections, numObjects, isValidTime, laneDetections, ~, isValidLaneTime] = sensor(poses, lanes, time);
    objectDetections = objectDetections(1:numObjects);

    % Aggregate all detections into a structure for later use
    if isValidTime || isValidLaneTime
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release the sensor object so it can be used again.
release(sensor);

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function sensor = createSensor(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensor = visionDetectionGenerator('SensorIndex', 1, ...
    'UpdateInterval', 0.09, ...
    'SensorLocation', [0.06 -0.015], ...
    'MaxSpeed', 50, ...
    'MaxNumLanesSource', 'Property', ...
    'DetectorOutput', 'Lanes and objects', ...
    'Intrinsics', cameraIntrinsics([600 799.999999999999],[320 240],[480 640]), ...
    'ActorProfiles', profiles);

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [34.27 -1.33 0;
    34.8 12.93 0;
    20.78 13.83 0;
    20.32 -1.4 0;
    34.27 -1.33 0];
roadWidth = 12;
road(scenario, roadCenters, roadWidth, 'Name', 'Road');

roadCenters = [29.2 -5.729 0;
    29.2 -45.4 0];
laneSpecification = lanespec([2 2]);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road1');

roadCenters = [14 6.1 0;
    -22 6.1 0];
laneSpecification = lanespec([2 2]);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road3');

roadCenters = [77 6.1 0;
    40.7 6.1 0];
laneSpecification = lanespec([2 2]);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road4');

roadCenters = [28.7 58.0355 0;
    28.7 18.3645 0];
laneSpecification = lanespec([2 2]);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road2');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-11.3517144889337 3.61637285066599 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'EgoCar');
waypoints = [-11.3517144889337 3.61637285066599 0;
    -2.6 3.9 0;
    6.8 3.9 0;
    17.7 2.1 0;
    23.3 -1.6 0;
    27.4 -2.5 0;
    33.7 0.1 0;
    35.8 6.6 0;
    33.1 13.3 0;
    29.5 14.9 0;
    24 13.8 0;
    18.8 10.7 0;
    13.4 8.9 0;
    4.7 8.4 0];
speed = [13;10;10;8;8;8;8;8;10;15;20;20;15;10];
trajectory(egoVehicle, waypoints, speed);

