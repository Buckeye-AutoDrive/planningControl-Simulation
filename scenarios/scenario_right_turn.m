function [allData, scenario, sensors] = scenario_right_turn()
%scenario_right_turn - Returns sensor detections
%    allData = scenario_right_turn returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = scenario_right_turn optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.10 (R2021a) and Automated Driving Toolbox 3.3 (R2021a).
% Generated on: 28-Jul-2021 11:02:27

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running
    
    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;
    
    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    insMeas = {};
    isValidTime = false(1, numSensors);
    
    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        % Generate the ego vehicle lane boundaries
        if isa(sensor, 'visionDetectionGenerator')
            maxLaneDetectionRange = min(500,sensor.MaxRange);
            lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
        end
        [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
        objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
    end
    
    % Aggregate all detections into a structure for later use
    if any(isValidTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end
    
    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

% function [sensors, numSensors] = createSensors(scenario)
% % createSensors Returns all sensor objects to generate detections
% 
% % Assign into each sensor the physical and radar profiles for all actors
% profiles = actorProfiles(scenario);
% sensors{1} = drivingRadarDataGenerator('SensorIndex', 1, ...
%     'MountingLocation', [3.7 0 0.2], ...
%     'RangeLimits', [0 100], ...
%     'TargetReportFormat', 'Detections', ...
%     'Profiles', profiles);
% sensors{2} = visionDetectionGenerator('SensorIndex', 2, ...
%     'DetectorOutput', 'Objects only', ...
%     'ActorProfiles', profiles);
% numSensors = 2;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [-5.9 0.4 0;
    49.7 0.2 0];
marking = laneMarking('Unmarked');
laneSpecification = lanespec(1, 'Width', 6, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

roadCenters = [46.9 3.1 0;
    47 -48.7 0];
marking = laneMarking('Unmarked');
laneSpecification = lanespec(1, 'Width', 6, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road1');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-3.5 -1 0], ...
    'FrontOverhang', 0.9, ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0 0.447 0.741], ...
    'Name', 'Car');
waypoints = [-3.5 -1 0;
    10 -1 0;
    20 -1 0;
    30 -1 0;
    38 -1 0;
    44.5 -1.5 0;
    46 -7.8 0;
    46 -14.7 0;
    46 -22.4 0;
    46 -31.4 0;
    46 -39.9 0;
    46 -47.5 0];
speed = [30;30;30;30;30;30;30;30;30;30;30;30];
waittime = [0;0;0;0;0;0;0;0;0;0;0;0];
trajectory(egoVehicle, waypoints, speed, waittime);

% Add the actors
actor(scenario, ...
    'ClassID', 7, ...
    'Length', 0.7, ...
    'Width', 0.2, ...
    'Height', 0.1, ...
    'Position', [47.6 0.0999999999999999 5.1], ...
    'Name', 'Traffic_Light');

actor(scenario, ...
    'ClassID', 9, ...
    'Length', 0.1, ...
    'Width', 0.1, ...
    'Height', 2.4, ...
    'Position', [42 -3.4 0], ...
    'PlotColor', [128 128 128] / 255, ...
    'Name', 'Pole');

actor(scenario, ...
    'ClassID', 8, ...
    'Length', 0.01, ...
    'Width', 0.7, ...
    'Height', 0.7, ...
    'Position', [42 -3.4 2.4], ...
    'PlotColor', [255 0 0] / 255, ...
    'Name', 'Stop Sign');



